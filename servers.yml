Description: >
  Prasad Pandari, udacity project server configuration

Parameters:
  EnvironmentName:
    Description: Project name prefixed to resource names.
    Type: String

  ScalingMinSize:
    Description: Minimum number of Instances
    Type: String
    Default: '4'

  ScalingMaxSize:
    Description: Maximum number of Instances
    Type: String
    Default: '4'

  KeyPairName:
    Description: Name of key-pair (PEM) file.
    Type: String
    Default: 'pandariawskeypair'


Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref LBSecGroup
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
      - SourceSecurityGroupId: !Ref JumpBoxSecGroup
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22

  JumpBoxSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for JumpBox
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} JumpBox Security Group"

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  WebAppS3Profile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub | 
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-0d1cd67c26f5fca19
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref WebAppS3Profile
      SecurityGroups: 
      - Ref: WebServerSecGroup  
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: "10"
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: !Ref ScalingMinSize
      MaxSize: !Ref ScalingMaxSize
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      TargetGroupARNs:
      - Ref: "WebAppTargetGroup"

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: "80"
      Protocol: "HTTP"

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: "path-pattern"
        Values: ["/"]
      ListenerArn: !Ref Listener
      Priority: "1"

  JumpBoxPublicSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PUB1-SN"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: JumpBoxSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} JumpBox Host 1

  JumpBoxPublicSubnet2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-06f2f779464715dc5
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PUB2-SN"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: JumpBoxSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} JumpBox Host 2


Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-DNS-NAME"


  
